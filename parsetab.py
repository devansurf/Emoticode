
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEDIVIDE ELSE EQUALS FLOAT IF INT LPAREN MINUS MULTIPLY NAME PLUS PRINT RPAREN THEN WHILE\n    emoti : expression\n         | var_assign\n         | print\n         | empty\n    \n    print : PRINT LPAREN expression RPAREN\n    \n    var_assign : NAME EQUALS expression\n    \n    expression : expression PLUS expression\n               | expression DIVIDE expression\n               | expression MULTIPLY expression\n               | expression MINUS expression\n    \n    expression : NAME\n    \n    expression : INT\n               | FLOAT\n    \n    expression : LPAREN expression RPAREN\n    \n    empty :\n    '
    
_lr_action_items = {'NAME':([0,9,11,12,13,14,15,18,],[6,17,17,17,17,17,17,17,]),'INT':([0,9,11,12,13,14,15,18,],[7,7,7,7,7,7,7,7,]),'FLOAT':([0,9,11,12,13,14,15,18,],[8,8,8,8,8,8,8,8,]),'LPAREN':([0,9,10,11,12,13,14,15,18,],[9,9,18,9,9,9,9,9,9,]),'PRINT':([0,],[10,]),'$end':([0,1,2,3,4,5,6,7,8,17,19,20,21,22,23,24,26,],[-15,0,-1,-2,-3,-4,-11,-12,-13,-11,-7,-8,-9,-10,-6,-14,-5,]),'PLUS':([2,6,7,8,16,17,19,20,21,22,23,24,25,],[11,-11,-12,-13,11,-11,-7,-8,-9,-10,11,-14,11,]),'DIVIDE':([2,6,7,8,16,17,19,20,21,22,23,24,25,],[12,-11,-12,-13,12,-11,12,-8,-9,12,12,-14,12,]),'MULTIPLY':([2,6,7,8,16,17,19,20,21,22,23,24,25,],[13,-11,-12,-13,13,-11,13,-8,-9,13,13,-14,13,]),'MINUS':([2,6,7,8,16,17,19,20,21,22,23,24,25,],[14,-11,-12,-13,14,-11,-7,-8,-9,-10,14,-14,14,]),'EQUALS':([6,],[15,]),'RPAREN':([7,8,16,17,19,20,21,22,24,25,],[-12,-13,24,-11,-7,-8,-9,-10,-14,26,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'emoti':([0,],[1,]),'expression':([0,9,11,12,13,14,15,18,],[2,16,19,20,21,22,23,25,]),'var_assign':([0,],[3,]),'print':([0,],[4,]),'empty':([0,],[5,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> emoti","S'",1,None,None,None),
  ('emoti -> expression','emoti',1,'p_emoticode','emoticode.py',89),
  ('emoti -> var_assign','emoti',1,'p_emoticode','emoticode.py',90),
  ('emoti -> print','emoti',1,'p_emoticode','emoticode.py',91),
  ('emoti -> empty','emoti',1,'p_emoticode','emoticode.py',92),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','emoticode.py',100),
  ('var_assign -> NAME EQUALS expression','var_assign',3,'p_var_assign','emoticode.py',104),
  ('expression -> expression PLUS expression','expression',3,'p_expression','emoticode.py',110),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','emoticode.py',111),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','emoticode.py',112),
  ('expression -> expression MINUS expression','expression',3,'p_expression','emoticode.py',113),
  ('expression -> NAME','expression',1,'p_expression_var','emoticode.py',121),
  ('expression -> INT','expression',1,'p_expression_int_float','emoticode.py',128),
  ('expression -> FLOAT','expression',1,'p_expression_int_float','emoticode.py',129),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parenthesis','emoticode.py',136),
  ('empty -> <empty>','empty',0,'p_empty','emoticode.py',146),
]
