
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTIPLYDIVIDEASSIGN COMMA DIVIDE ELSE END EQUALS FLOAT FUNC GREATERTHAN IF INT LESSTHAN LPAREN MINUS MULTIPLY NAME NOTEQUALS PLUS PRINT RPAREN STRING THEN WHILE\n    emoti : code\n          | conditional\n          | while\n          | end\n    \n     code : expression\n          | var_assign\n          | print\n          | empty\n    \n    var_assign : NAME ASSIGN expression\n    \n    expression : expression PLUS expression\n               | expression DIVIDE expression\n               | expression MULTIPLY expression\n               | expression MINUS expression\n               | expression LESSTHAN expression\n               | expression GREATERTHAN expression\n               | expression EQUALS expression\n               | expression NOTEQUALS expression\n    \n    function : FUNC NAME LPAREN param RPAREN THEN\n    \n    conditional : IF expression THEN\n    \n    while : WHILE expression THEN\n    \n    end : END\n    \n    param : param COMMA param\n    \n    param : expression\n    \n    expression : NAME\n    \n    expression : INT\n               | FLOAT\n               | STRING\n    \n    expression : LPAREN expression RPAREN\n    \n    print : PRINT LPAREN expression RPAREN\n    \n    empty :\n    '
    
_lr_action_items = {'IF':([0,],[10,]),'WHILE':([0,],[11,]),'END':([0,],[12,]),'NAME':([0,10,11,17,19,20,21,22,23,24,25,26,30,32,],[13,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'INT':([0,10,11,17,19,20,21,22,23,24,25,26,30,32,],[14,14,14,14,14,14,14,14,14,14,14,14,14,14,]),'FLOAT':([0,10,11,17,19,20,21,22,23,24,25,26,30,32,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'STRING':([0,10,11,17,19,20,21,22,23,24,25,26,30,32,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'LPAREN':([0,10,11,17,18,19,20,21,22,23,24,25,26,30,32,],[17,17,17,17,32,17,17,17,17,17,17,17,17,17,17,]),'PRINT':([0,],[18,]),'$end':([0,1,2,3,4,5,6,7,8,9,12,13,14,15,16,28,33,34,35,36,37,38,39,40,41,42,43,44,46,],[-30,0,-1,-2,-3,-4,-5,-6,-7,-8,-21,-24,-25,-26,-27,-24,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-9,-28,-29,]),'PLUS':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[19,-24,-25,-26,-27,19,-24,19,19,-10,-11,-12,-13,19,19,19,19,19,-28,19,]),'DIVIDE':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[20,-24,-25,-26,-27,20,-24,20,20,20,-11,-12,20,20,20,20,20,20,-28,20,]),'MULTIPLY':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[21,-24,-25,-26,-27,21,-24,21,21,21,-11,-12,21,21,21,21,21,21,-28,21,]),'MINUS':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[22,-24,-25,-26,-27,22,-24,22,22,-10,-11,-12,-13,22,22,22,22,22,-28,22,]),'LESSTHAN':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[23,-24,-25,-26,-27,23,-24,23,23,-10,-11,-12,-13,23,23,23,23,23,-28,23,]),'GREATERTHAN':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[24,-24,-25,-26,-27,24,-24,24,24,-10,-11,-12,-13,24,24,24,24,24,-28,24,]),'EQUALS':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[25,-24,-25,-26,-27,25,-24,25,25,-10,-11,-12,-13,25,25,25,25,25,-28,25,]),'NOTEQUALS':([6,13,14,15,16,27,28,29,31,33,34,35,36,37,38,39,40,43,44,45,],[26,-24,-25,-26,-27,26,-24,26,26,-10,-11,-12,-13,26,26,26,26,26,-28,26,]),'ASSIGN':([13,],[30,]),'THEN':([14,15,16,27,28,29,33,34,35,36,37,38,39,40,44,],[-25,-26,-27,41,-24,42,-10,-11,-12,-13,-14,-15,-16,-17,-28,]),'RPAREN':([14,15,16,28,31,33,34,35,36,37,38,39,40,44,45,],[-25,-26,-27,-24,44,-10,-11,-12,-13,-14,-15,-16,-17,-28,46,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'emoti':([0,],[1,]),'code':([0,],[2,]),'conditional':([0,],[3,]),'while':([0,],[4,]),'end':([0,],[5,]),'expression':([0,10,11,17,19,20,21,22,23,24,25,26,30,32,],[6,27,29,31,33,34,35,36,37,38,39,40,43,45,]),'var_assign':([0,],[7,]),'print':([0,],[8,]),'empty':([0,],[9,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> emoti","S'",1,None,None,None),
  ('emoti -> code','emoti',1,'p_emoticode','emoticode.py',152),
  ('emoti -> conditional','emoti',1,'p_emoticode','emoticode.py',153),
  ('emoti -> while','emoti',1,'p_emoticode','emoticode.py',154),
  ('emoti -> end','emoti',1,'p_emoticode','emoticode.py',155),
  ('code -> expression','code',1,'p_code','emoticode.py',161),
  ('code -> var_assign','code',1,'p_code','emoticode.py',162),
  ('code -> print','code',1,'p_code','emoticode.py',163),
  ('code -> empty','code',1,'p_code','emoticode.py',164),
  ('var_assign -> NAME ASSIGN expression','var_assign',3,'p_var_assign','emoticode.py',178),
  ('expression -> expression PLUS expression','expression',3,'p_expression','emoticode.py',184),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','emoticode.py',185),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression','emoticode.py',186),
  ('expression -> expression MINUS expression','expression',3,'p_expression','emoticode.py',187),
  ('expression -> expression LESSTHAN expression','expression',3,'p_expression','emoticode.py',188),
  ('expression -> expression GREATERTHAN expression','expression',3,'p_expression','emoticode.py',189),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','emoticode.py',190),
  ('expression -> expression NOTEQUALS expression','expression',3,'p_expression','emoticode.py',191),
  ('function -> FUNC NAME LPAREN param RPAREN THEN','function',6,'p_function','emoticode.py',204),
  ('conditional -> IF expression THEN','conditional',3,'p_conditional','emoticode.py',216),
  ('while -> WHILE expression THEN','while',3,'p_while','emoticode.py',228),
  ('end -> END','end',1,'p_end','emoticode.py',244),
  ('param -> param COMMA param','param',3,'p_param_multi','emoticode.py',254),
  ('param -> expression','param',1,'p_param_single','emoticode.py',260),
  ('expression -> NAME','expression',1,'p_expression_var','emoticode.py',266),
  ('expression -> INT','expression',1,'p_expression_int_float_string','emoticode.py',273),
  ('expression -> FLOAT','expression',1,'p_expression_int_float_string','emoticode.py',274),
  ('expression -> STRING','expression',1,'p_expression_int_float_string','emoticode.py',275),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_parenthesis','emoticode.py',282),
  ('print -> PRINT LPAREN expression RPAREN','print',4,'p_print','emoticode.py',289),
  ('empty -> <empty>','empty',0,'p_empty','emoticode.py',298),
]
